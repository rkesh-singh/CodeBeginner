https://practice.geeksforgeeks.org/problems/sorting-elements-of-an-array-by-frequency/0

Given an array of integers, sort the array according to frequency of elements. For example,
if the input array is {2, 3, 2, 4, 5, 12, 2, 3, 3, 3, 12}, then modify the array to {3, 3, 3, 3, 2, 2, 2, 12, 12, 4, 5}. 

If frequencies of two elements are same, print them in increasing order.

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

public class SortElementByFrequency
{
	public static void main(String[] args)
	{
		Integer[] inp = { 2, 3, 2, 5, 4, 12, 5, 4, 2, 3, 3, 3, 12 };
		// Integer[] inp = { 5, 5, 4, 6, 4 };

		Map<Integer, Integer> map = getFrequenyMap(inp);

		List<Entry<Integer, Integer>> list = new ArrayList<Entry<Integer, Integer>>(map.entrySet());

		HashMap<Integer, Integer> sortMapByValue = sortMapByValue(list);

		for (Entry<Integer, Integer> entry : sortMapByValue.entrySet())
		{
			for (int i = 0; i < entry.getValue(); i++)
			{
				System.out.print(entry.getKey() + " ");
			}
		}

	}

	private static HashMap<Integer, Integer> sortMapByValue(List<Entry<Integer, Integer>> list)
	{
		Collections.sort(list, new Comparator<Map.Entry<Integer, Integer>>()
		{

			@Override
			public int compare(Entry<Integer, Integer> o1, Entry<Integer, Integer> o2)
			{
				// to maintain descending order of frequency
				int freqCompare = o2.getValue().compareTo(o1.getValue());

				// to maintain aescending order of key
				int valCompare = o1.getKey().compareTo(o2.getKey());

				if (freqCompare == 0)
					return valCompare;
				else
					return freqCompare;
			}

		});

		// using LinkedHashMap to maintain insertion order
		HashMap<Integer, Integer> linkedHashMap = new LinkedHashMap<Integer, Integer>();

		for (Iterator iterator = list.iterator(); iterator.hasNext();)
		{
			Entry<Integer, Integer> entry = (Entry<Integer, Integer>) iterator.next();
			linkedHashMap.put(entry.getKey(), entry.getValue());

		}
		return linkedHashMap;
	}

	private static Map<Integer, Integer> getFrequenyMap(Integer[] inp)
	{
		Map<Integer, Integer> map = new HashMap<Integer, Integer>();

		for (int i = 0; i < inp.length; i++)
		{
			if (map.containsKey(inp[i]))
				map.put(inp[i], map.get(inp[i]) + 1);
			else
				map.put(inp[i], 1);
		}

		return map;
	}
}
