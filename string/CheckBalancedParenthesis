https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/


public class CheckBalancedParenthesis
{

	public static void main(String[] args)
	{
		char exp[] = { '{', '(', ')', '}', '[', ']' };
		if (areParenthesisBalanced(exp))
			System.out.println("Balanced ");
		else
			System.out.println("Not Balanced ");
	}

	private static boolean areParenthesisBalanced(char[] exp)
	{
		stack obj = new stack();

		for (int i = 0; i < exp.length; i++)
		{
			char character1 = exp[i];

			if (character1 == '[' || character1 == '{' || character1 == '(')
			{
				obj.push(character1);
			} else
			{
				if (obj.isEmpty())
					return false;
				else if (!isValidCombination(obj.pop(), character1))
				{
					return false;
				}
			}
		}
		return obj.isEmpty() ? true : false;
	}

	private static boolean isValidCombination(char pop, char character1)
	{
		if (pop == '(' && character1 == ')')
			return true;
		else if (pop == '{' && character1 == '}')
			return true;
		else if (pop == '[' && character1 == ']')
			return true;
		return false;
	}
}

class stack
{

	int top = -1;
	char[] items = new char[100];

	public void push(char character)
	{

		if (top == 99)
			System.out.println("stack overflow");
		else
			items[++top] = character;
	}

	public char pop()
	{
		if (top == -1)
		{
			System.out.println("stack underflow");
			return '\0';
		} else
			return items[top--];
	}

	public boolean isEmpty()
	{
		if (top == -1)
			return true;
		else
			return false;
	}
}
